import java.util.ArrayList;

//Checkings accounts (sub-class of Accounts class)
public class Checkings extends Account{
	//private data members 
	private int lastCheckIssued; 
	private int lastCheckUsed; 
	private int maxChecksPerMonth;
	
	
	//****************************
	//Constructor
	public Checkings(int n, String o, double b, int lastCheckIssued, int lastCheckUsed, int maxChecks) {
		super(n, o, b); 
		this.lastCheckIssued = lastCheckIssued; 
		this.lastCheckUsed = lastCheckUsed;
		maxChecksPerMonth = maxChecks; 
	}
	
    //****************************
	//Print Checkings Account
	public String printAccount(){
		return getNumber() + " " + "C " + getOwner() + " " + getBalance() + " " + this.lastCheckIssued + " " + this.lastCheckUsed + " " + maxChecksPerMonth; 
	}
	
	//***********************************
	//Withdraw method
	public void withdraw(ArrayList<Account> accounts, String owner, double amt) {
		if(validateOwner(accounts, getNumber(), getOwner(), owner)) {
			setBalance(getBalance() - amt); 
			System.out.println("Checking Account " + getNumber() + " withdrew " + amt); 
		}
		else { //error message
			System.out.println("Account " + getNumber() + " could not process the withdrawal"); 
		}
	}
	
	//***********************************
	//Deposit method
	public void deposit(ArrayList<Account> accounts, double amt) {
		setBalance(getBalance() + amt); 
		System.out.println("Checking Account " + getNumber() + " deposited " + amt); 
	}
	
	//***********************************
	//Transfer methods
	public void transferFrom(ArrayList<Account> accounts, String owner, double amt) {
		if(validateOwner(accounts, getNumber(), getOwner(), owner)) { //transfer the amount from A to B
			setBalance(getBalance() - amt); 
			System.out.println("Account" + getNumber() + " transferred " + amt + " to another account"); 
		}
		else { //error message 
			System.out.println("Account " + getNumber() + " could not transfer " + amt); 
		}
	}
	
	public void transferTo(ArrayList<Account> accounts, String owner, Account a, double amt) {
		if(validateOwner(accounts, a.getNumber(), a.getOwner(), owner)) {    //transfer the amount from A to B
			setBalance(getBalance() + amt); 
		}
	}

	
	//***********************************
	//Close method 
	public void close(ArrayList<Account> accounts, String owner) {
		boolean foundOwner = false;
		int accountFoundNumber = 0; 
		for (int i = 0; i < accounts.size(); i++) {
			if (getNumber() == accounts.get(i).getNumber()) {
				if (getOwner().equals(owner)) {   
					foundOwner = true;
					accountFoundNumber = i;  //account to be closed 
				}	
			}
		}
		
		//if balance is positive and the owner is legitimate owner: close the account
		if (foundOwner == true && getBalance() > 0.0 ) {
			accounts.remove(accountFoundNumber);   	//remove the account from the accounts ArrayList 
			System.out.println("Closed checkings account" + accountFoundNumber); 
		} 
		else { //error message
			System.out.println("Account " + getNumber() + " could not be closed");
		}
	}
	
	
	
	//****************************
	//Getters and Setters
	public int getLastCheckIssued() {
		return lastCheckIssued;
	}
	public void setLastCheckIssued(int lastCheckIssued) {
		this.lastCheckIssued = lastCheckIssued;
	}
	public int getLastCheckUsed() {
		return lastCheckUsed;
	}
	public void setLastCheckUsed(int lastCheckUsed) {
		this.lastCheckUsed = lastCheckUsed;
	}
	public int getMaxChecksPerMonth() {
		return maxChecksPerMonth;
	}
	public void setMaxChecksPerMonth(int maxChecksPerMonth) {
		this.maxChecksPerMonth = maxChecksPerMonth;
	} 
}
