/**
 * 
 * @Cristalle Choi and @Sara Mehdinia 
 * CMS 270 Assignment 2 - Inheritance and Polymorphism
 * Batch Processing System for a Credit Union
 * November 11, 2020
 */

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Scanner;

//Driver class
public class BatchProcessor {
	
	//Stores all of the accounts in a single ArrayList
	private static ArrayList<Account> accounts = new ArrayList<Account>();

	//**************************************
	//Validate method: validate if the request is from a legitimate owner of the account
	public static boolean validateOwner(Account a, String owner) {
		for(int i = 0; i < accounts.size(); i++) {
			if(a.getNumber() == accounts.get(i).getNumber()) {
				if(a.getOwner().equals(owner)) {
					return true; 
				}
			}
		}
		return false; 
	}
	
	//**************************************
	//Deposit method: amount to be deposited 
	public static void processDeposit(Account a, double Amt) {
		a.deposit(Amt); 
	}
	
	//*************************************
	//Withdrawal method: amount to be withdrawn
	public static void processWithdrawal(Account a, double Amt, String owner) {
		//if the owner is a legitimate owner 
		if(validateOwner(a, owner)) {
			a.withdraw(Amt); 
		}
		else { //error message
			System.out.println("Account " + a.getNumber() + " could not process the withdrawal"); 
		}
	}
	
	//*************************************
	//Transfer method: transfer from account to another account
	public static void processTransfer(Account a, Account b, double Amt, String owner) {
		//if it's a validated owner of the account 
		if(validateOwner(a, owner)) { //transfer the amount from A to B
			a.withdraw(Amt);
			b.deposit(Amt); 
		}
		else { //error message 
			System.out.println(Amt + " from " + owner + " could not transfer"); 
		}
	}
	
	//***************************************
	//Close method: close account
	public static void processClose(Account a, String owner) {
		boolean foundOwner = false;
		int accountFoundNumber = 0; 
		for (int i = 0; i < accounts.size(); i++) {
			if (a.getNumber() == accounts.get(i).getNumber()) {
				if (a.getOwner().equals(owner)) {   
					foundOwner = true;
					accountFoundNumber = i;  //account to be closed 
				}	
			}
		}
		//if balance is positive and the owner is legitimate owner: close the account
		if (foundOwner == true && a.getBalance() > 0.0 ) {
			accounts.get(accountFoundNumber).close(); 
			accounts.remove(accountFoundNumber);   	//remove the account from the accounts ArrayList 
		} 
		else { //error message
			System.out.println("Account " + a.getNumber() + " could not be closed");
		}
	}
		

	//****************************************
	//Main method
	public static void main(String[] args) {
		try {
			//reads original account-status data from accounts.txt 
			File f = new File("accounts.txt"); 
			Scanner input = new Scanner(f); 
			
			//counts how many accounts to process 
			int numAccounts = 0; 
			while(input.hasNextLine()) {
				input.nextLine(); 
				numAccounts++; 
			}
			input.close(); 
			
			Scanner scan = new Scanner(f); 
			
			//Stores all of the accounts in a single ArrayList called accounts
			for(int i = 0; i < numAccounts; i++) {
				String line = scan.nextLine(); 
				String[] a = line.split(" ");   //splits on the blank space 
				int accountNum = Integer.parseInt(a[0]);  //account number
				char accountType = a[1].charAt(0);   //account type: C for checking, S for savings
				String ownerName = a[2] + " " + a[3];       //owner name given as first name and last name
				double acctBalance = Double.parseDouble(a[4]);   //account balance
				
				//add to accounts arraylist
				if(accountType == 'C') {  //make a new checkings account
					int lastCheckIssued = Integer.parseInt(a[5]); 
					int lastCheckUsed = Integer.parseInt(a[6]); 
					int maxChecksMonth = Integer.parseInt(a[7]); 
					Checkings c = new Checkings(accountNum, ownerName, acctBalance, lastCheckIssued, lastCheckUsed, maxChecksMonth); 
					accounts.add(i, c); 
				}
				else if(accountType == 'S'){   //make a new savings account objects
					Savings s = new Savings(accountNum, ownerName, acctBalance); 
					//if the balance in the savings account goes below the min, charge the maint. fee once per month	
					accounts.add(i, s); 
				}
			}
			
			scan.close(); //Close the Scanner
			
		}  //if it fails, then the catch block will handle errors
		catch(FileNotFoundException e) {
			System.out.println("Error"); 
			e.printStackTrace(); //will tell you what went wrong
		}
		
		
		
		//********************************
		//process the batch.txt file
		try {
			File batch = new File("batch.txt"); 
			Scanner s = new Scanner(batch); 
			
			//counts how many requests to process
			int numRequests = 0; 
			while(s.hasNextLine()) {
				numRequests++;
				s.nextLine(); 
			}
			
			
			Scanner x = new Scanner(batch); 
			for(int i = 0; i < numRequests; i++) {
				String request = x.next(); 
				
				//****************************
				//W to withdraw amount
				if(request.equals("W")) {
					String a = x.next(); 
					int accountNumber = Integer.parseInt(a); 
					String amt = x.next(); 
					double amount = Double.parseDouble(amt); 
					String ownerFirst = x.next(); 
					String ownerLast = x.next();
					String combinedOwnerName = ownerFirst + " " + ownerLast; 
					
					boolean found = false; 
					for(int k = 0; k < accounts.size(); k++) {
						if(accounts.get(k).getNumber() == accountNumber) {
							Account accountItself = accounts.get(k); 
							processWithdrawal(accountItself, amount, combinedOwnerName); 
							found = true; 
						}
					}
					
					if(found == false) {
						System.out.println("Account " + accountNumber + " could not process withdrawal"); 
					}
				}
				
				
				//*****************************
				//D to deposit amount
				if(request.equals("D")) {
					String a = x.next(); 
					int accountNumber = Integer.parseInt(a); 
					String amt = x.next(); 
					double amount = Double.parseDouble(amt); 
					
					boolean found = false; 
					for(int k = 0; k < accounts.size(); k++) {
						if (accounts.get(k).getNumber() == accountNumber) {
							Account accountItself = accounts.get(k);
							processDeposit(accountItself, amount);
							found = true; 
						}
					}
					
					//if the account number does not exist within our accounts arraylist
					if(found == false) {
						System.out.println("Account " + accountNumber + " could not process deposit"); 
					}
				}
				
				
				//*******************************
				//T to transfer amount
				if(request.equals("T")) {
					String a = x.next(); 
					int accountNumberSource = Integer.parseInt(a); 
					String b = x.next(); 
					int accountNumberDestination = Integer.parseInt(b); 
					String amt = x.next(); 
					double amount = Double.parseDouble(amt); 
					String firstName = x.next(); 
					String lastName = x.next();
					String combinedOwnerName = firstName + " " + lastName; 
					
					Account accountSource = null;
					for(int k = 0; k < accounts.size(); k++) {
						if(accounts.get(k).getNumber() == accountNumberSource) {
							accountSource = accounts.get(k); 
						}
					}
					
					Account accountDestination = null;
					for(int r = 0; r < accounts.size(); r++) {
						if(accounts.get(r).getNumber() == accountNumberDestination) {
							accountDestination = accounts.get(r); 
						}
					}
					
					processTransfer(accountSource, accountDestination, amount, combinedOwnerName);
				}
				
				
				//*******************************
				//C to close account 
				if(request.equals("C")) {
					String a = x.next(); 
					int accountNumber = Integer.parseInt(a);
					String ownerFirst = x.next();
					String ownerLast = x.next();
					String combinedOwnerName = ownerFirst + " " + ownerLast;
					
					boolean found = false; 
					for(int w = 0; w < accounts.size(); w++) {
						if (accounts.get(w).getNumber() == accountNumber) {
							Account accountItself = accounts.get(w);
							processClose(accountItself, combinedOwnerName);
							found = true; 
						}
					}
					
					//if the account number does not exist within our accounts arraylist
					if(found == false) {
						System.out.println("Account " + accountNumber + " could not be closed"); 
					}
				}
				
			}
		    s.close(); //close the scanner
			x.close(); 
		} //if it fails, then the catch block will handle errors
		catch(FileNotFoundException error) {
			System.out.println("Error"); 
			error.printStackTrace(); //will tell you what went wrong
		}
		

		//Overwrite the accounts.txt file with the updated account status data 
		try {
			//charge maint fee for savings accounts 
			for(int t = 0; t < accounts.size(); t++) {
				if(accounts.get(t) instanceof Savings) {  //cast the account to savings - downcasting 
					Savings s = (Savings) accounts.get(t);  
					s.chargeMaintFee(); 
				}
			}
			
			String source = accounts.get(0).printAccount() + "\n"; 
			for(int i = 1; i < accounts.size(); i++) {
				source = source + accounts.get(i).printAccount() + "\n"; 
			}
			File file = new File("accounts.txt"); 
			FileWriter fw = new FileWriter(file.getAbsoluteFile()); 
			BufferedWriter bw = new BufferedWriter(fw); 
			bw.write(source); 
			bw.close(); 
		} 
		catch (IOException e) {
		    e.printStackTrace();
		}   
		

	}
}
