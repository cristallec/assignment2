/**
 * 
 * @Cristalle Choi and @Sara Mehdinia 
 * CMS 270 Assignment 2 - Inheritance and Polymorphism
 * Batch Processing System for a Credit Union
 * November 11, 2020
 */

import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.Scanner;

//Driver class
public class BatchProcessor {
	
	//Stores all of the accounts in a single ArrayList
	private static ArrayList<Account> accounts = new ArrayList<Account>(); 

	
	//**************************************
	//Deposit method: amount to be deposited 
	public static void processDeposit(Account a, double Amt) {
		a.setBalance(a.getBalance() + Amt); 
	}
	
	
	//*************************************
	//Withdrawal method: amount to be withdrawn
	public static void processWithdrawal(Account a, double Amt, String owner) {
		//validate if it's requested by a legitimate owner of the account
		boolean foundOwner = false;
		for (int i = 0; i < accounts.size(); i++) {
			if (a.getNumber() == accounts.get(i).getNumber()) {
				if (a.getOwner().equals(owner)) {   
					foundOwner = true;
				}	
			}
		}
		
		//if the owner is a legitimate owner 
		if(foundOwner == true) {
			a.setBalance(a.getBalance() - Amt);   //withdraw the amount from the balance 
		}
		else { //error message
			System.out.println("Account " + a.getNumber() + " could not process the withdrawal"); 
		}
	}
	
	
	
	//*************************************
	//Transfer method: transfer from account to another account
	public static void processTransfer(Account a, Account b, double Amt, String owner) {
		//validate if it's requested by a legitimate owner of the account
		boolean foundOwner = false;
		for (int i = 0; i < accounts.size(); i++) {
			if (a.getNumber() == accounts.get(i).getNumber()) {
				if (a.getOwner().equals(owner)) {    
					foundOwner = true;
				}	
			}
		}
		
		//if it's a validated owner of the account 
		if(foundOwner == true) { //transfer the amount from A to B
			a.setBalance(a.getBalance() - Amt); 
			b.setBalance(b.getBalance() + Amt); 
		}
		else { //error message 
			System.out.println("Account " + a.getNumber() + " could not transfer to account " + b.getNumber()); 
		}
		
	}
	
	
	
	//***************************************
	//Close method: close account
	public static void processClose(Account a, String owner) {
		boolean foundOwner = false;
		int accountFoundNumber = -1;
		for (int i = 0; i < accounts.size(); i++) {
			if (a.getNumber() == accounts.get(i).getNumber()) {
				if (a.getOwner().equals(owner)) {    //make sure both of 'em have spaces???
					foundOwner = true;
					accountFoundNumber = i;
				}	
			}
		}
		
		//if balance is positive and the owner is legitimate owner: close the account
		if (foundOwner == true && a.getBalance() > 0.0 ) {
			//remove the account from the accounts ArrayList 
			accounts.remove(accountFoundNumber);
			//delete account from record of text file!!!! 
			//!!!!!!!!!!!!!!!!!!!
		} 
		else { //error message
			System.out.println("Account " + a.getNumber() + " could not be closed");
		}
		
	}
		

	
	
	//****************************************
	//Main method
	public static void main(String[] args) {
		try {
			//reads original account-status data from accounts.txt 
			File f = new File("accounts.txt"); 
			Scanner input = new Scanner(f); 
			
			//counts how many accounts to process 
			int numAccounts = 0; 
			while(input.hasNextLine()) {
				input.nextLine(); 
				numAccounts++; 
			}
			input.close(); 
			
			Scanner scan = new Scanner(f); 
			
			//Stores all of the accounts in a single ArrayList called accounts
			for(int i = 0; i < numAccounts; i++) {
				String line = scan.nextLine(); 
				String[] a = line.split(" ");   //splits on the blank space 
				int accountNum = Integer.parseInt(a[0]);  //account number
				char accountType = a[1].charAt(0);   //account type: C for checking, S for savings
				String ownerName = a[2] + " " + a[3];       //owner name given as first name and last name
				double acctBalance = Double.parseDouble(a[4]);   //account balance
				
				//add to accounts arraylist
				if(accountType == 'C') {  //make a new checkings account
					int lastCheckIssued = Integer.parseInt(a[5]); 
					int lastCheckUsed = Integer.parseInt(a[6]); 
					int maxChecksMonth = Integer.parseInt(a[7]); 
					accounts.add(i, new Checkings(accountNum, ownerName, acctBalance, lastCheckIssued, lastCheckUsed, maxChecksMonth)); 
				}
				else if(accountType == 'S'){   //make a new savings account objects
					accounts.add(i, new Savings(accountNum, ownerName, acctBalance)); 
				    //If the balance in savings accounts goes below minimum, maintenance fee is charged once per month
					((Savings) accounts.get(i)).chargeMaintFee(); 
				}
			}
			
			scan.close(); //Close the Scanner
			
		}  //if it fails, then the catch block will handle errors
		catch(FileNotFoundException e) {
			System.out.println("Error"); 
			e.printStackTrace(); //will tell you what went wrong
		}
		
		
		
		//********************************
		//process the batch.txt file
		try {
			File batch = new File("batch.txt"); 
			Scanner s = new Scanner(batch); 
			
			//counts how many requests to process
			int numRequests = 0; 
			while(s.hasNextLine()) {
				numRequests++;
				s.nextLine(); 
				System.out.println(numRequests); 
			}
			
			Scanner x = new Scanner(batch); 
			for(int i = 0; i < numRequests; i++) {
				String request = x.next(); 
				
				//****************************
				//W to withdraw amount
				if(request.equals("W")) {
					String a = x.next(); 
					int accountNumber = Integer.parseInt(a); 
					String amt = x.next(); 
					double amount = Double.parseDouble(amt); 
					String ownerFirst = x.next(); 
					String ownerLast = x.next();
					String combinedOwnerName = ownerFirst + " " + ownerLast; 
					Account accountItself2 = null;
					for(int k = 0; k < accounts.size(); k++) {
						if(accounts.get(k).getNumber() == accountNumber) {
							accountItself2 = accounts.get(k); 
						}
					}
					processWithdrawal(accountItself2, amount, combinedOwnerName); 
				}
				
				
				//*****************************
				//D to deposit amount
				if(request.equals("D")) {
					String a = x.next(); 
					int accountNumber = Integer.parseInt(a); 
					String amt = x.next(); 
					double amount = Double.parseDouble(amt); 
					Account accountItself = null;
					for(int k = 0; k < accounts.size(); k++) {
						if(accounts.get(k).getNumber() == accountNumber) {
							accountItself = accounts.get(k); 
						}
					}
					processDeposit(accountItself, amount); 
				}
				
				
				//*******************************
				//T to transfer amount
				if(request.equals("T")) {
					String a = x.next(); 
					int accountNumberSource = Integer.parseInt(a); 
					String b = x.next(); 
					int accountNumberDestination = Integer.parseInt(b); 
					String amt = x.next(); 
					double amount = Double.parseDouble(amt); 
					String owner = x.next(); 
					
					Account accountSource = null;
					for(int k = 0; k < accounts.size(); k++) {
						if(accounts.get(k).getNumber() == accountNumberSource) {
							accountSource = accounts.get(k); 
						}
					}
					
					Account accountDestination = null;
					for(int r = 0; r < accounts.size(); r++) {
						if(accounts.get(r).getNumber() == accountNumberDestination) {
							accountDestination = accounts.get(r); 
						}
					}
					
					processTransfer(accountSource, accountDestination, amount, owner);
				}
				
				
				//*******************************
				//C to close account 
				if(request.equals("C")) {
					String a = x.next(); 
					int accountNumber = Integer.parseInt(a);
					String ownerFirst = x.next();
					String ownerLast = x.next();
					String combinedOwnerName = ownerFirst + " " + ownerLast;
					Account accountItself = null; 
					
					for (int j = 0; j < accounts.size(); j++) {
						if (accounts.get(i).getNumber() == accountNumber) {
							accountItself = accounts.get(i);
						}
					}
					System.out.println(accountItself.getOwner()); 
					//processClose(accountItself, combinedOwnerName);
				}

			}
		    s.close(); //close the scanner
			x.close(); 
			
		} //if it fails, then the catch block will handle errors
		catch(FileNotFoundException error) {
			System.out.println("Error"); 
			error.printStackTrace(); //will tell you what went wrong
		}
		
   

	}
}

	
	
