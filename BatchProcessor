/**
 * 
 * @Cristalle Choi and @Sara Mehdinia 
 * CMS 270 Assignment 2 - Inheritance and Polymorphism
 * Batch Processing System for a Credit Union
 * November 11, 2020
 */

import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.zip.InflaterInputStream; 

//Driver class
public class BatchProcessor {
	
	//Stores all of the accounts in a single ArrayList
	private static ArrayList<Account> accounts = new ArrayList<Account>(); 

	
	//**************************************
	//Deposit method: amount to be deposited 
	public static void processDeposit(Account a, double Amt) {
		
	}
	
	//*************************************
	//Withdrawal method: amount to be withdrawn
	public static void processWithdrawal(Account a, double Amt, String owner) {
		
	}
	
	//*************************************
	//Transfer method: transfer from account to another account
	public static void processTransfer(Account a, Account b, double Amt, String owner) {
		
	}
	
	//***************************************
	//Close method: close account
	public static void processClose(Account a, String owner) {
		
		boolean foundOwner = false;
		int accountFoundNumber = -1;
		
		for (int i = 0; i < accounts.size(); i++) {
			
			if (a.getNumber() == accounts.get(i).getNumber()) {
				
				if (a.getOwner().equals(owner)) { //make sure both of 'em have spaces???
					
					foundOwner = true;
					accountFoundNumber = i;
					
					
				}
				
			}
			
		}
		//loop through accounts arraylist
		//if a.getAccountNumber() == account.getAccountNumber() {
		// 		check if a.getOwner() == String owner that we passed in
		//then we chiillinnnn
		
		
		//if balance = positive && owner is legitimate owner
		
		if (foundOwner == true && a.getBalance() > 0.0 ) {
			
			//close the account
			accounts.remove(accountFoundNumber);
			//delete account from record of text file
			//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
			
			
		} else {
			System.out.println("Account " + a.getNumber() + " could not be closed");
		}
		
			
			
			//close account
		//else
			//say no thanks and do something (error message)
		
	}
		
	
	//****************************************
	//Main method
	public static void main(String[] args) {
		//Read the original account-status data from accounts.txt and stores all of accounts in a single ArrayList
		
		
		//Read batch.txt and process the transactions one at a time
		
		//W: amount to be withdrawn
		
		//D: amount to be deposited
		
		//T: transfer from account number to another account number
		
		//C: account number to be closed
		
		//Write the updated account status data to the text file accounts.txt that overwrite the original file
		
		try {
			//reads original account-status data from accounts.txt 
			File f = new File("accounts.txt"); 
			Scanner input = new Scanner(f); 
			String l = input.nextLine(); 
			
			//counts how many accounts to process 
			int numAccounts = 0; 
			while(input.hasNextLine()) {
				input.nextLine(); 
				numAccounts++; 
			}
			input.close(); 
			
			Scanner scan = new Scanner(f); 
			
			//Stores all of the accounts in a single ArrayList called accounts
			for(int i = 0; i < numAccounts; i++) {
				String line = scan.nextLine(); 
				String[] a = line.split(" ");   //splits on the blank space 
				int accountNum = Integer.parseInt(a[0]);  //account number
				char accountType = a[1].charAt(0);   //account type: C for checking, S for savings
				String ownerName = a[2] + " " + a[3];       //owner name given as first name and last name
				double acctBalance = Double.parseDouble(a[4]);   //account balance
				
				//add to accounts arraylist
				if(accountType == 'C') {  //make a new checkings account
					accounts.add(i, new Checkings(accountNum, ownerName, acctBalance)); 
				}
				else if(accountType == 'S'){   //make a new savings account objects
					accounts.add(i, new Savings(accountNum, ownerName, acctBalance)); 
				}
			}
			
			scan.close(); //Close the Scanner
			
		}  //if it fails, then the catch block will handle errors
		catch(FileNotFoundException e) {
			System.out.println("Error"); 
			e.printStackTrace(); //will tell you what went wrong
		}
		
		//process the batch.txt file
		try {
			File f = new File("batch.txt"); 
			Scanner s = new Scanner(f); 
			String line = s.nextLine(); 
			
			//counts how many requests to process
			int numRequests = 0; 
			while(s.hasNextLine()) {
				numRequests++;
				s.nextLine(); 
				System.out.println(numRequests); 
			}
			
			
			Scanner x = new Scanner(f); 
			for(int i = 0; i < numRequests; i++) {
				String request = x.next(); 
				
				//W to withdraw amount
				if(request.equals("W")) {
					
				}
				
				//D to deposit amount
				if(request.equals("D")) {
					
				}
				
				//T to transfer amount
				if(request.equals("T")) {
					
				}
				
				//C to close account 
				if(request.equals("C")) {
					String a = s.next(); 
					int accountNumber = Integer.parseInt(a);
					String ownerFirst = s.next();
					String ownerLast = s.next();
					String combinedOwnerName = ownerFirst + " " + ownerLast;
					Account accountItself = null;
					
					for (int j = 0; j < accounts.size(); j++) {
						
						if (accounts.get(i).getNumber() == accountNumber) {
							accountItself = accounts.get(i);
					}
					
					processClose(accountItself, combinedOwnerName);
					
					
				
					
				}
				
				
			}
			
			
			s.close(); //close the scanner
			x.close(); 
			}
			
		} //if it fails, then the catch block will handle errors
		catch(FileNotFoundException error) {
			System.out.println("Error"); 
			error.printStackTrace(); //will tell you what went wrong
		}
		
		

	}
}
	
	
